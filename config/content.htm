<h1>About</h1>
<p>cmsite: wcms use <a href="https://github.com/mdecycu/cmsimde">https://github.com/mdecycu/cmsimde</a> as submodule</p>
<h1>20221014</h1>
<p>hii</p>
<h1>canvas</h1>
<p>格子改成黑底 白色跑</p>
<p><!-- 納入 Brython 環境 -->
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
<!-- 啟動 Brython --></p>
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
<!-- 給定 brython_div1 division 標註 --></p>
<div id="brython_div1"></div>
<p><!-- 加入啟動按鈕後的 Rect 行走程式原始碼 -->
<script type="text/python">
# 這個程式用於 demo 綠色方塊沿著特定網格路徑行走
# 從 Brython 程式庫中的 browser 模組導入 document 類別, 並以簡寫設定為 doc
from browser import document as doc
# 從 browser 模組導入 html 類別, 主要用於建立 CANVAS 標註物件, 並插入頁面中
from browser import html
# 用於定時執行特定函式
import browser.timer
# 導入亂數模組
from random import random, randint
import math

# 利用 html 建立一個 CANVAS 標註物件, 與變數 canvas 對應
canvas = html.CANVAS(width = 600, height = 600)
# 將 canvas 標註的 id 設為 "canvas"
canvas.id = "canvas"
# 將 document 中 id 為 "brython_div" 的標註 
# 設為與 brython_div 變數對應
brython_div = doc["brython_div1"]

# 建立 buttons
brython_div <= html.BUTTON("啟動", id="power")
brython_div <= html.BR()

# 將 canvas 標註放入 brython_div1 所在位置
# 頁面中原本就已經放入 <div id="brython_div"></div> 標註
brython_div <= canvas
# 將頁面中 id 為 canvas 的 CANVAS 設為與 canvas 變數對應
canvas = doc["canvas"]
# 將 canvas 的 2d 繪圖 context 命名為 ctx
ctx = canvas.getContext("2d")

# 建立一個 dRect() 函式
# s default 為 1, c defaul 為紅色
def dRect(lux, luy, w, h, s=1, c='#ff0000'):
    ctx.lineWidth = s
    ctx.strokeStyle = c
    ctx.beginPath();
    ctx.rect(lux, luy, w, h)
    ctx.stroke();
    
# 建立畫直線函式
def draw_line(x1, y1, x2, y2, color="#ff0000"):
    ctx.beginPath()
    ctx.moveTo(x1, y1)
    ctx.lineTo(x2, y2)
    ctx.strokeStyle = color
    ctx.stroke()

# 建立 write Text 函式
def wText(x, y, t, s=14, c='#0000ff'):
    ctx.font = str(s) + "px Arial";
    ctx.fillText(t, x, y)

# 定義畫格線的函式
def grid(startx, starty, w, h, wnum, hnum, pixel=1, color="#ff0000"):
    # 利用迴圈與座標增量繪圖
    # 因為輸入 wnum 與 hnum 為格子數, 畫格線數則需加上 1
    for i in range(wnum+1):
        for j in range(hnum+1):
            # 畫上下直線
            yend = starty + h*(hnum)
            xend = startx + w*(wnum)
            x = startx + i*w
            draw_line(x, starty, x, yend, color)
            # 畫左右直線
            y = starty + j*h
            draw_line(startx, y, xend, y, color)
            #wText(w/2-10, y-w/2, str(j))

# 從兩個座標點求中心點座標
def center(lx, ly, rx, ry):
    # lx is x coord of the left up corner
    # rx is the x coord of th right down corner
    x = (lx + rx)/2
    y = (ly + ry)/2
    return x, y
    
# 畫出填色方塊
def draw_rect(gx, gy, gw, gh, color="lime"):
    # gx is the grid coord at x direction
    # gy is the grid coord at y direction
    # gw is the with of the green rect
    # gh is the height of the green rect
    lx = origx + (gx-1)*w
    ly = origy + (gy-1)*h
    rx = origx + gx*w
    ry = origy + gy*h
    cx, cy = center(lx, ly, rx, ry)
    # glx is the x coord of the left corner
    # gly is the y coord of the left corner
    glx = cx - gw/2
    gly = cy - gh/2
    # 利用設定的顏色值畫出 rectangle
    ctx.fillStyle = color
    ctx.fillRect(glx, gly, gw, gh)

# 以黑色覆蓋位於 (nowx, nowy) 
# 且比目標方塊長寬各大於 1 pixel的方塊
def wipe():
    draw_rect(nowx, nowy, 30+1, 30+1, color="black")

# 畫出位於 (nowx, nowy) 的白色方塊
def draw():
    draw_rect(nowx, nowy, 30, 30, color="white")

# 繞著外圍行走
def walk():
    global stepx, stepy
    # 向下
    if nowy < hnum and nowx == 1:
        stepx = 0
        stepy = 1
    # 向右
    elif nowx < wnum and nowy == hnum:
        stepx = 1
        stepy = 0
    # 向上
    elif nowy == hnum and nowx == wnum:
        stepx = 0
        stepy = -1
    # 向左
    elif nowx == wnum and nowy == 1:
        stepx = -1
        stepy = 0
        
# 每隔短暫時間即呼叫執行一次的函式
def game():
    # 因 nowx 與 nowy 在函式外宣告
    # 且在函式內改變對應值, 因此需宣告為 global
    global nowx, nowy
    walk()
    wipe()
    nowx += stepx
    nowy += stepy
    draw()

# 將 anim 設為 None
anim = None
 
def launchAnimation(ev):
    global anim
    # 初始啟動, anim 為 None
    if anim is None:
        # 每 0.08 秒執行一次 draw 函式繪圖
        #anim = timer.set_interval(draw, 80)
        anim = browser.timer.set_interval(game, 100)
        # 初始啟動後, 按鈕文字轉為"暫停"
        doc['power'].text = '暫停'
    elif anim == 'hold':
        # 當 anim 為 'hold' 表示曾經暫停後的啟動, 因此持續以 set_interval() 持續旋轉, 且將 power 文字轉為"暫停"
        #anim = timer.set_interval(draw, 80)
        anim = browser.timer.set_interval(game, 100)
        doc['power'].text = '暫停'
    else:
        # 初始啟動後, 使用者再按 power, 此時 anim 非 None 也不是 'hold', 因此會執行 clear_interval() 暫停
        # 且將 anim 變數設為 'hold', 且 power 文字轉為"繼續"
        #timer.clear_interval(anim)
        browser.timer.clear_interval(anim)
        anim = 'hold'
        doc['power'].text = '繼續'
        
# 綠色方塊起點座標與 x 及 y 方向的座標增量
nowx = 1
nowy = 1
stepx = 0
stepy = 0
# 設定格數
# width 方向格子數
wnum = 15
# height 方向格子數
hnum = 15
# 設定線寬
pixel = 1
# 設定 w 寬度
w = int(canvas.width/wnum) - pixel
# 設定 h 高度
h = int(canvas.height/hnum) - pixel
# 設定繪圖座標點起點位置
origx = 1
origy = 1
# 利用 grid 函式畫出格線
#grid(origx, origy, w, h, wnum, hnum, pixel=1, color="black")
#draw_line(0, 0, 600, 600, color="black")

ctx.beginPath()
ctx.arc(100, 75, 50, 0, math.pi)
ctx.stroke()

doc["power"].bind("click", launchAnimation)
#browser.timer.set_interval(game, 100)
</script>
</p>
<p>關鍵程式碼:</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">#grid(origx, origy, w, h, wnum, hnum, pixel=1, color="black")
#draw_line(0, 0, 600, 600, color="black")</pre><h1>20230105</h1>
<p>檢查倉儲名稱是否有誤</p>
<p><img alt="檢查倉儲名稱是否正確" height="581" src="/images/螢幕擷取畫面_20230105_110733.png" width="1547"/></p>
<h1>20230105練習</h1>
<h2>ex1</h2>
<p><img alt="" height="300" src="/images/螢幕擷取畫面_20230105_111735.png" width="456"/></p>
<p><span>ex1在for迴圈裡面設定一個範圍1是起始 10是終點 以3為一個單位</span></p>
<h2>ex2</h2>
<p>函式呼叫與定義</p>
<p><span><img alt="" height="364" src="/images/1-15.png" width="500"/></span></p>
<p>ex2第5行end+1是因為原先範圍的最後沒有涵蓋到(例如到15但15沒有被涵蓋)</p>
<p>tips函式呼叫不可縮排</p>
<p>補充:sumto()函式可以同時呼叫很多 例如同時呼叫sumto(5,25) <span>sumto(1,100)就會有由1加到100等於:sth跟由5加到25等於:sth</span></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">def sumto(start=1,end=15):
    sum = 0
    #start = 1
    #end = 100
    for i in range(start,end+1,1):
        sum = sum + i
        #print(i)
    print("由" + str(start) + "加到" + str(end) + "等於:" + str(sum))
          
          
sumto(5,25)
sumto(1,100)</pre>
<p><br/>列出python關鍵字</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">['False', 'None', 'True', 'and', 'as', 'assert', 'async', 'await', 'break', 'class', 'continue', 'def', 'del', 'elif', 'else', 'except', 'finally', 'for', 'from', 'global', 'if', 'import', 'in', 'is', 'lambda', 'nonlocal', 'not', 'or', 'pass', 'raise', 'return', 'try', 'while', 'with', 'yield']</pre>
<p></p>
<p></p>
<h1>W12HW-2</h1>
<p><a href="https://mde.tw/content/Python.html?src=https://gist.githubusercontent.com/mdecycu/1e3171970153b18fa15d2377b0d1ef59/raw/8bb9a86b8c55e0d550a2a11cfa2b866bac777a2f/temp_conver_1.py">第一個練習</a></p>
<pre># Brython 的 input() 可以接受輸入提示字串, 跳出瀏覽器輸入表單後, 將輸入內容以字串取回
user_input_temp = input("請輸入攝氏溫度值:")
# 接著列出 user_input_temp 變數的資料型別
print(type(user_input_temp))</pre>
<p></p>
<p><a href="https://gist.githubusercontent.com/40923150/ff8df392005897ac373fbcce42d971ec/raw/bb929f0bf7862929d7478dce1485f74168b9037f/w12_hw-2.py">第二個練習</a></p>
<p># Brython 的 input() 可以接受輸入提示字串, 跳出瀏覽器輸入表單後, 將輸入內容以字串取回<br/>user_input_temp = input("請輸入攝氏溫度值:")<br/># 接著列出 user_input_temp 變數的資料型別<br/>print(type(user_input_temp))<br/># 到這裡已知利用 input() 函式將傳回字串, 接著以 float() 將字串轉為浮點數<br/>user_input_temp = float(user_input_temp)<br/># 因為攝氏溫度乘上 9/5 之後再加上 32 就可以得到對應的華氏溫度值<br/>Fahrenheit = (user_input_temp*9/5) + 32<br/># 到這裡, Fahrenheit 資料型別為浮點數, 而 user_input_temp 在第 8 行也轉為浮點數<br/># 要將兩個浮點數與字串相加, 都必須透過 str() 轉為字串<br/>print("攝氏 " + str(user_input_temp) + " 度, 等於華氏 " + str(Fahrenheit) + " 度.")</p>
<p></p>
<h1>W12 HW</h1>
<p><a href="https://gist.githubusercontent.com/40923150/ff8df392005897ac373fbcce42d971ec/raw/f369f37c04587dabc01a5ac28679c63d658751d2/w12_hw-1.py">https://gist.githubusercontent.com/40923150/ff8df392005897ac373fbcce42d971ec/raw/f369f37c04587dabc01a5ac28679c63d658751d2/w12_hw-1.py</a></p>
<div>
<div class="syntaxhighlighter py" id="highlighter_550085">
<table border="0" cellpadding="0" cellspacing="0">
<tbody>
<tr>
<td class="gutter">
<div class="line number1 index0 alt2">1</div>
<div class="line number2 index1 alt1">2</div>
<div class="line number3 index2 alt2">3</div>
<div class="line number4 index3 alt1">4</div>
</td>
<td class="code">
<div class="container">
<div class="line number1 index0 alt2"><code class="py comments"># Brython 的 input() 可以接受輸入提示字串, 跳出瀏覽器輸入表單後, 將輸入內容以字串取回</code></div>
<div class="line number2 index1 alt1"><code class="py plain">user_input_temp </code><code class="py keyword">=</code> <code class="py functions">input</code><code class="py plain">(</code><code class="py string">"請輸入攝氏溫度值:"</code><code class="py plain">)</code></div>
<div class="line number3 index2 alt2"><code class="py comments"># 接著列出 user_input_temp 變數的資料型別</code></div>
<div class="line number4 index3 alt1"><code class="py functions">print</code><code class="py plain">(</code><code class="py functions">type</code><code class="py plain">(user_input_temp))</code></div>
</div>
</td>
</tr>
</tbody>
</table>
</div>
</div>
<p><a href="https://mdecp2022.github.io/site-40923144/content/Brython.html?src=https://gist.githubusercontent.com/40923144/0714240bd735e1078033c463a711cda2/raw/58e1b11dffa8a21665a20eff5580a753c7ca9913/w12_HW_test.py">Ex.1</a></p>
<div>
<div class="syntaxhighlighter html" id="highlighter_298648">
<table border="0" cellpadding="0" cellspacing="0">
<tbody>
<tr>
<td class="gutter">
<div class="line number1 index0 alt2">1</div>
<div class="line number2 index1 alt1">2</div>
<div class="line number3 index2 alt2">3</div>
<div class="line number4 index3 alt1">4</div>
<div class="line number5 index4 alt2">5</div>
<div class="line number6 index5 alt1">6</div>
<div class="line number7 index6 alt2">7</div>
<div class="line number8 index7 alt1">8</div>
<div class="line number9 index8 alt2">9</div>
<div class="line number10 index9 alt1">10</div>
<div class="line number11 index10 alt2">11</div>
</td>
<td class="code">
<div class="container">
<div class="line number1 index0 alt2"><code class="html plain"># Brython 的 input() 可以接受輸入提示字串, 跳出瀏覽器輸入表單後, 將輸入內容以字串取回</code></div>
<div class="line number2 index1 alt1"><code class="html plain">user_input_temp = input("請輸入攝氏溫度值:")</code></div>
<div class="line number3 index2 alt2"><code class="html plain"># 接著列出 user_input_temp 變數的資料型別</code></div>
<div class="line number4 index3 alt1"><code class="html plain">print(type(user_input_temp))</code></div>
<div class="line number5 index4 alt2"><code class="html plain"># 到這裡已知利用 input() 函式將傳回字串, 接著以 float() 將字串轉為浮點數</code></div>
<div class="line number6 index5 alt1"><code class="html plain">user_input_temp = float(user_input_temp)</code></div>
<div class="line number7 index6 alt2"><code class="html plain"># 因為攝氏溫度乘上 9/5 之後再加上 32 就可以得到對應的華氏溫度值</code></div>
<div class="line number8 index7 alt1"><code class="html plain">Fahrenheit = (user_input_temp*9/5) + 32</code></div>
<div class="line number9 index8 alt2"><code class="html plain"># 到這裡, Fahrenheit 資料型別為浮點數, 而 user_input_temp 在第 8 行也轉為浮點數</code></div>
<div class="line number10 index9 alt1"><code class="html plain"># 要將兩個浮點數與字串相加, 都必須透過 str() 轉為字串</code></div>
<div class="line number11 index10 alt2"><code class="html plain">print("攝氏 " + str(user_input_temp) + " 度, 等於華氏 " + str(Fahrenheit) + " 度.")</code></div>
</div>
</td>
</tr>
</tbody>
</table>
</div>
</div>
<p><a href="https://mdecp2022.github.io/site-40923144/content/Brython.html?src=https://gist.githubusercontent.com/40923144/6f977d48e3bd6ea7bb6c0677088b5074/raw/b3d23898cd0a06a94acee6ffd3ba514c82fb4d00/w12_HW_test2.py">Ex.2</a></p>
<div>
<div class="syntaxhighlighter py" id="highlighter_480180">
<table border="0" cellpadding="0" cellspacing="0">
<tbody>
<tr>
<td class="gutter">
<div class="line number1 index0 alt2">1</div>
<div class="line number2 index1 alt1">2</div>
<div class="line number3 index2 alt2">3</div>
<div class="line number4 index3 alt1">4</div>
<div class="line number5 index4 alt2">5</div>
<div class="line number6 index5 alt1">6</div>
<div class="line number7 index6 alt2">7</div>
<div class="line number8 index7 alt1">8</div>
<div class="line number9 index8 alt2">9</div>
<div class="line number10 index9 alt1">10</div>
<div class="line number11 index10 alt2">11</div>
<div class="line number12 index11 alt1">12</div>
<div class="line number13 index12 alt2">13</div>
<div class="line number14 index13 alt1">14</div>
<div class="line number15 index14 alt2">15</div>
<div class="line number16 index15 alt1">16</div>
<div class="line number17 index16 alt2">17</div>
<div class="line number18 index17 alt1">18</div>
<div class="line number19 index18 alt2">19</div>
<div class="line number20 index19 alt1">20</div>
<div class="line number21 index20 alt2">21</div>
<div class="line number22 index21 alt1">22</div>
<div class="line number23 index22 alt2">23</div>
<div class="line number24 index23 alt1">24</div>
<div class="line number25 index24 alt2">25</div>
<div class="line number26 index25 alt1">26</div>
<div class="line number27 index26 alt2">27</div>
<div class="line number28 index27 alt1">28</div>
<div class="line number29 index28 alt2">29</div>
<div class="line number30 index29 alt1">30</div>
<div class="line number31 index30 alt2">31</div>
<div class="line number32 index31 alt1">32</div>
<div class="line number33 index32 alt2">33</div>
<div class="line number34 index33 alt1">34</div>
<div class="line number35 index34 alt2">35</div>
<div class="line number36 index35 alt1">36</div>
<div class="line number37 index36 alt2">37</div>
<div class="line number38 index37 alt1">38</div>
<div class="line number39 index38 alt2">39</div>
<div class="line number40 index39 alt1">40</div>
<div class="line number41 index40 alt2">41</div>
</td>
<td class="code">
<div class="container">
<div class="line number1 index0 alt2"><code class="py plain">&lt;h3&gt;w12</code><code class="py keyword">-</code><code class="py value">1</code><code class="py plain">&lt;</code><code class="py keyword">/</code><code class="py plain">h3&gt;</code></div>
<div class="line number2 index1 alt1"><code class="py plain">&lt;!</code><code class="py keyword">-</code><code class="py keyword">-</code></div>
<div class="line number3 index2 alt2"><code class="py plain">在動態網站頁面中啟用 Brython 執行環境的用法, 請注意動態網站執行所在路徑</code></div>
<div class="line number4 index3 alt1"><code class="py keyword">-</code><code class="py keyword">-</code><code class="py plain">&gt;</code></div>
<div class="line number5 index4 alt2"><code class="py plain">&lt;script src</code><code class="py keyword">=</code><code class="py string">"./../cmsimde/static/brython.js"</code><code class="py plain">&gt;&lt;</code><code class="py keyword">/</code><code class="py plain">script&gt;</code></div>
<div class="line number6 index5 alt1"><code class="py plain">&lt;script src</code><code class="py keyword">=</code><code class="py string">"./../cmsimde/static/brython_stdlib.js"</code><code class="py plain">&gt;&lt;</code><code class="py keyword">/</code><code class="py plain">script&gt;</code></div>
<div class="line number7 index6 alt2"><code class="py plain">&lt;!</code><code class="py keyword">-</code><code class="py keyword">-</code> <code class="py plain">啟動 Brython </code><code class="py keyword">-</code><code class="py keyword">-</code><code class="py plain">&gt;</code></div>
<div class="line number8 index7 alt1"><code class="py plain">&lt;p&gt;</code></div>
<div class="line number9 index8 alt2"><code class="py plain">&lt;script&gt;</code><code class="py keyword">/</code><code class="py keyword">/</code> <code class="py plain">&lt;![CDATA[</code></div>
<div class="line number10 index9 alt1"><code class="py plain">window.onload</code><code class="py keyword">=</code><code class="py plain">function(){</code></div>
<div class="line number11 index10 alt2"><code class="py plain">brython({debug:</code><code class="py value">1</code><code class="py plain">, pythonpath:[</code><code class="py string">'./../cmsimde/static/'</code><code class="py plain">,</code><code class="py string">'/downloads/py/'</code><code class="py plain">]});</code></div>
<div class="line number12 index11 alt1"><code class="py plain">}</code></div>
<div class="line number13 index12 alt2"><code class="py keyword">/</code><code class="py keyword">/</code> <code class="py plain">]]&gt;&lt;</code><code class="py keyword">/</code><code class="py plain">script&gt;</code></div>
<div class="line number14 index13 alt1"><code class="py plain">&lt;!</code><code class="py keyword">-</code><code class="py keyword">-</code> <code class="py plain">以下事先在頁面中加入 </code><code class="py functions">id</code><code class="py keyword">=</code><code class="py string">"brython_div"</code> <code class="py plain">的 div 標註</code></div>
<div class="line number15 index14 alt2"><code class="py plain">之後可利用 Brython 的 document 模組與此 html 標註對應</code></div>
<div class="line number16 index15 alt1"><code class="py keyword">-</code><code class="py keyword">-</code><code class="py plain">&gt;&lt;</code><code class="py keyword">/</code><code class="py plain">p&gt;</code></div>
<div class="line number17 index16 alt2"><code class="py plain">&lt;!</code><code class="py keyword">-</code><code class="py keyword">-</code> <code class="py plain">利用 html 建立一個 </code><code class="py functions">id</code><code class="py keyword">=</code><code class="py string">"btn1"</code> <code class="py plain">的按鈕 </code><code class="py keyword">-</code><code class="py keyword">-</code><code class="py plain">&gt;</code></div>
<div class="line number18 index17 alt1"><code class="py plain">&lt;p&gt;&lt;button </code><code class="py functions">id</code><code class="py keyword">=</code><code class="py string">"btn1"</code><code class="py plain">&gt;取使用者輸入&lt;</code><code class="py keyword">/</code><code class="py plain">button&gt;&lt;</code><code class="py keyword">/</code><code class="py plain">p&gt;</code></div>
<div class="line number19 index18 alt2"><code class="py plain">&lt;div </code><code class="py functions">id</code><code class="py keyword">=</code><code class="py string">"brython_div"</code><code class="py plain">&gt;&lt;</code><code class="py keyword">/</code><code class="py plain">div&gt;</code></div>
<div class="line number20 index19 alt1"><code class="py plain">&lt;p&gt;</code></div>
<div class="line number21 index20 alt2"><code class="py plain">&lt;script </code><code class="py functions">type</code><code class="py keyword">=</code><code class="py string">"text/python"</code><code class="py plain">&gt;</code><code class="py keyword">/</code><code class="py keyword">/</code> <code class="py plain">&lt;![CDATA[</code></div>
<div class="line number22 index21 alt1"><code class="py keyword">from</code> <code class="py plain">browser </code><code class="py keyword">import</code> <code class="py plain">html, document</code></div>
<div class="line number23 index22 alt2"><code class="py comments"># Brython 的 input() 可以接受輸入提示字串, 跳出瀏覽器輸入表單後, 將輸入內容以字串取回</code></div>
<div class="line number24 index23 alt1"><code class="py comments">#user_input_temp = input("請輸入攝氏溫度值:")</code></div>
<div class="line number25 index24 alt2"><code class="py comments"># 接著列出 user_input_temp 變數的資料型別</code></div>
<div class="line number26 index25 alt1"><code class="py comments"># 但是在頁面中 Brython 的 print() 將會顯示在 log 而非頁面</code></div>
<div class="line number27 index26 alt2"><code class="py comments">#print(type(user_input_temp))</code></div>
<div class="line number28 index27 alt1"><code class="py comments"># 這裡定義一個 brython_div 變數, 透過 document[] 與頁面中 id="brython_div" 的位置對應</code></div>
<div class="line number29 index28 alt2"><code class="py plain">brython_div </code><code class="py keyword">=</code> <code class="py plain">document[</code><code class="py string">"brython_div"</code><code class="py plain">]</code></div>
<div class="line number30 index29 alt1"><code class="py comments"># 看能不能直接將變數值字串列在標註 id 為 "brython_div" 的頁面位置</code></div>
<div class="line number31 index30 alt2"><code class="py comments">#brython_div &lt;= user_input_temp</code></div>
<div class="line number32 index31 alt1"><code class="py comments"># 之後若要列出 html, 則需要透過 Brython 的 html 模組</code></div>
<div class="line number33 index32 alt2"><code class="py comments"># 接下來要設法按下按鈕之後才執行取使用者 input 的流程</code></div>
<div class="line number34 index33 alt1"><code class="py comments"># 首先 comment 掉前面的 input() 與 print(), 同時蓋掉輸出, 並利用事件導向設計一個函式</code></div>
<div class="line number35 index34 alt2"><code class="py keyword">def</code> <code class="py plain">get_input(env):</code></div>
<div class="line number36 index35 alt1"><code class="py spaces">    </code><code class="py plain">user_input_temp </code><code class="py keyword">=</code> <code class="py functions">input</code><code class="py plain">(</code><code class="py string">"請輸入攝氏溫度值:"</code><code class="py plain">)</code></div>
<div class="line number37 index36 alt2"><code class="py spaces">    </code><code class="py plain">brython_div &lt;</code><code class="py keyword">=</code> <code class="py plain">user_input_temp</code></div>
<div class="line number38 index37 alt1"><code class="py comments"># 透過 Brython browser 模組中的 document 物件將 id="btn1" 的物件中的 bind() 方法</code></div>
<div class="line number39 index38 alt2"><code class="py comments"># 讓使用者 click 後會經由瀏覽器中的 event 通知執行 get_input 函式</code></div>
<div class="line number40 index39 alt1"><code class="py plain">document[</code><code class="py string">"btn1"</code><code class="py plain">].bind(</code><code class="py string">'click'</code><code class="py plain">, get_input)</code></div>
<div class="line number41 index40 alt2"><code class="py keyword">/</code><code class="py keyword">/</code> <code class="py plain">]]&gt;&lt;</code><code class="py keyword">/</code><code class="py plain">script&gt;</code></div>
</div>
</td>
</tr>
</tbody>
</table>
</div>
</div>
<p>&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</p>
<p></p>
<h1>W13</h1>
<h1>W15</h1>
<p> </p>
<p><span>Q1：為何學習計算機程式需要建立個人倉儲?</span><br/><span>A1：可儲存個人的檔案或資料，更新或修改內容時，都可以看的到添加或刪除了什麼</span><br/><span></span></p>
<p><span></span></p>
<p><span>Q2：全球資訊網能夠提供甚麼功能或有什麼優點?</span></p>
<p>A2：可以讓人查詢資料</p>
<p><span></span></p>
<p><span>Q3：Replit, stud.cycu.org 與 localhost 分別代表甚麼?</span><br/><span>A3：Replit:線上程式開發環境服務</span></p>
<p>     <span><span> </span> stud.cycu.org:學校主機的名稱</span></p>
<p><span>       localhost:是一個在電腦網路中用於表示「此電腦」的主機名</span><br/><span></span></p>
<p><span>Q4：https, ssh 到底提供使用者那些功能或優點?</span><br/><span>A4：https:是一種透過計算機網路進行安全通訊的傳輸協定</span></p>
<p>     <span> </span><span> ssh:是一種網路安全協定，通過加密和認證機制實現安全的訪問和檔傳輸等業務</span><br/><span></span></p>
<p><span>Q5：Brython 與 Python 有甚麼差別?</span><br/><span>A5：Brython:<span>使用python取代avaScript</span></span></p>
<p>     <span> </span><span> Python:程式語言</span><br/><span></span></p>
<p><span>Q6：能夠直接在瀏覽器中以 Brython 繪製中華民國國旗, 或模擬綠色方塊在方塊格點中任意移動, 代表甚麼?</span><br/><span>A6：能利用寫程式的方式，將自己想要的圖形給顯現出來</span><br/><span></span></p>
<p><span>Q7：變數, 字串, 整數, 浮點數, 數列, Tuple, Dictionary, 函式, 重複迴圈, class, 物件導向, 資料庫, 這些名詞對您而言代表甚麼?</span></p>
<p><span>A7：寫程式時會利用到的一些單字</span></p>
<p><a href="https://mdecp2022.github.io/site-40923144/content/Brython.html?src=https://gist.githubusercontent.com/40923144/c3565560360a02f4d8b5c2b4ca1edf0b/raw/ae190a345afafe75f8fb74e92f1f6cb49116812f/W13"></a></p>
<p></p><h1>Note</h1>
<h1>建立cp2022倉儲</h1>
<p>1.先到teams下載框內的東西</p>
<p><img alt="" height="230" src="https://mdecp2022.github.io/site-40923144/images/1120-1.png" width="500"/></p>
<p></p>
<p>2.下載至隨身碟之後點選start，小黑窗就會跳出來</p>
<p><img alt="" height="609" src="https://mdecp2022.github.io/site-40923144/images/1120-2.png" width="500"/></p>
<p></p>
<p>3.跳出來之後就可以在小黑窗上打以下指令</p>
<p>cd tmp  (切換到tmp資料夾)</p>
<p>&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</p>
<p>cms複製網址進靜態網站態網站</p>
<h1>Brython</h1>
<p>=======</p>
<p>cms複製網址進靜態網站態網站</p>
<h1>Brython</h1>
<h1>2022.1014 test</h1>
<p><strong>hi</strong></p>
<h1>Brython</h1>
<p>&gt;&gt;&gt;&gt;&gt;&gt;&gt; 37a3b3e9cbf1a58b4b2fe1dd99a4ef57c1101ff5</p>
<p><a href="https://en.wikipedia.org/wiki/Python_(programming_language)">https://en.wikipedia.org/wiki/Python_(programming_language)</a></p>
<h4>Examples:</h4>
<p style="padding-left: 30px;"><a href="https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d">https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d</a></p>
<p style="padding-left: 30px;"><a href="https://www.geeksforgeeks.org/python-programming-examples/">https://www.geeksforgeeks.org/python-programming-examples/</a></p>
<p style="padding-left: 30px;"><a href="https://www.programiz.com/python-programming/examples">https://www.programiz.com/python-programming/examples</a></p>
<p style="padding-left: 30px;"><a href="https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/">https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/</a></p>
<h4>Python Tutorial:</h4>
<p style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/">https://docs.python.org/3/tutorial/</a></p>
<p style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/introduction.html">An informal introduction to Python</a></p>
<h4>Indentation</h4>
<h4>Variables</h4>
<h4>Comments</h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#numbers">Numbers</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#strings">Strings</a></h4>
<h4>print</h4>
<p><a href="https://docs.python.org/3/tutorial/controlflow.html">Python control flow tools</a></p>
<h4 style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/controlflow.html#for-statements">for</a></h4>
<h4 style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/controlflow.html#if-statements">if</a></h4>
<h4 style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/controlflow.html#the-range-function">range</a></h4>
<h4>open</h4>
<h4>read</h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#lists">lists</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/datastructures.html#tuples-and-sequences">tuples</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/datastructures.html#dictionaries">dictionaries</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#defining-functions">functions</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/errors.html#exceptions">try ... except</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#break-and-continue-statements-and-else-clauses-on-loops">break</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#pass-statements">pass</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/classes.html?highlight=classes">classes</a></h4>
<p>這個頁面 demo 如何在同一頁面下納入多個線上 Ace 編輯器與執行按鈕 (<a href="/downloads/practice_html.txt">practice_html.txt</a> 動態頁面超文件).</p>
<p><a href="/downloads/practice_html.txt">practice_html.txt</a> 動態頁面超文件應該可以在啟動 Brython 時, 設定將 .py 檔案放入 downloads/py 目錄中引用.</p>
<p>亦即將所有對應的 html 也使用 Brython 產生, 然後寫為 <a href="https://docs.python.org/3/tutorial/classes.html">class</a> 後, 在範例導入時透過 <a href="https://docs.python.org/3/tutorial/classes.html#instance-objects">instance</a> 引用.</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">&lt;!-- 啟動 Brython --&gt;
&lt;script&gt;
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
&lt;/script&gt;</pre>
<p>從 1 累加到 100:</p>
<p><button id="add1to100">1 add to 100</button></p>
<p>將 iterable 與 iterator <a href="https://home.gamer.com.tw/creationDetail.php?sn=4337438">相關說明</a>, 利用 Brython 與 Ace Editor 整理在這個頁面.</p>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
</p>
<p><!-- 導入 FileSaver 與 filereader --></p>
<p>
<script src="/static/ace/FileSaver.min.js" type="text/javascript"></script>
<script src="/static/ace/filereader.js" type="text/javascript"></script>
</p>
<p><!-- 導入 ace --></p>
<p>
<script src="/static/ace/ace.js" type="text/javascript"></script>
<script src="/static/ace/ext-language_tools.js" type="text/javascript"></script>
<script src="/static/ace/mode-python3.js" type="text/javascript"></script>
<script src="/static/ace/snippets/python.js" type="text/javascript"></script>
</p>
<p><!-- 導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫 -->
<script src="/static/Cango-24v03-min.js"></script>
<script src="/static/gearUtils-09.js"></script>
<script src="/static/SVGpathUtils-6v03-min.js"></script>
<script src="/static/sylvester.js"></script>
<script src="/static/PrairieDraw.js"></script>
</p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/javascript">
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
</script>
</p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()
Ace1 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run1():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace1.editor.setValue(prog)
    Ace1.editor.scrollToRow(0)
    Ace1.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace1.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run1'].bind('click', Ace1.run)
doc['kw_show_console1'].bind('click', Ace1.show_console)
doc['kw_clear_console1'].bind('click', Ace1.clear_console)
doc['clear_bd1'].bind('click', clear_bd1)
# 呼叫函式執行
run1()
</script>
</p>
<p><!-- add 1 to 100 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace2 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add(ev):
    Ace2.editor.setValue(add_src)
    Ace2.editor.scrollToRow(0)
    Ace2.editor.gotoLine(0)
    Ace2.run()

# id 為 "add1to100" 的按鈕點按時, 執行 add 方法
doc["add1to100"].bind('click', add)
</script>
</p>
<p><!-- add 1 to 100 結束--></p>
<!-- editor1 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<p><br/><em><strong> </strong></em><label>Filename: <input id="kw_filename" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src1', 'kw_filename1');" type="submit" value="Save"/></p>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run1">Run</button> <button id="kw_show_console1">Output</button> <button id="kw_clear_console1">清除輸出區</button><button id="clear_bd1">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console1"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div1"></div>
<!-- editor1 結束 --><hr/><!-- ########################################## -->
<p>從 1 累加到 100 part2:</p>
<p><button id="add1to100part2">1 add to 100</button><button id="cango_three_gears">cango_three_gears</button><button id="bsnake">BSnake</button><button id="aitetris">AI Tetris</button></p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()
Ace3 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run2():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src2"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace3.editor.setValue(prog)
    Ace3.editor.scrollToRow(0)
    Ace3.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace3.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run2'].bind('click', Ace3.run)
doc['kw_show_console2'].bind('click', Ace3.show_console)
doc['kw_clear_console2'].bind('click', Ace3.clear_console)
doc['clear_bd2'].bind('click', clear_bd2)
# 呼叫函式執行
run2()
</script>
</p>
<p><!-- add 1 to 100 part2 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace4 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )

# 透過 Ace4 以類別建立一個通用的 button2, 可以在多個案例中將 gist 程導入編輯區

class button2:
    def __init__(self, url):
        self.url = url

    # 記得加入 event 輸入變數
    def do(self,ev):
        Ace4.editor.setValue(open(self.url).read())
        Ace4.editor.scrollToRow(0)
        Ace4.editor.gotoLine(0)
        Ace4.run()

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add2(ev):
    Ace4.editor.setValue(add_src)
    Ace4.editor.scrollToRow(0)
    Ace4.editor.gotoLine(0)
    Ace4.run()

# id 為 "add1to100part2" 的按鈕點按時, 執行 add 方法
doc["add1to100part2"].bind('click', add2)
# 以下為運用 button2 class 的通用 gist 程式導入區
################################## cango_three_gears start
cango_three_gears_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/cango_three_gears_brython_div2.py"
cango_three_gears = button2(cango_three_gears_url)
doc["cango_three_gears"].bind("click", cango_three_gears.do)
################################## cango_three_gears end
################################## bsnake start
bsnake_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/kmol_snakey.py"
bsnake = button2(bsnake_url)
doc["bsnake"].bind("click", bsnake.do)
################################## bsnake end
################################## aitetris start
aitetris_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/pygame_to_brython_tetris_ai.py"
aitetris = button2(aitetris_url)
doc["aitetris"].bind("click", aitetris.do)
################################## aitetris end
</script>
</p>
<p><!-- add 1 to 100 part2 結束--></p>
<!-- editor2 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor2" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename2" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src2', 'kw_filename2');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run2">Run</button> <button id="kw_show_console2">Output</button> <button id="kw_clear_console2">清除輸出區</button><button id="clear_bd2">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console2"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div2"></div>
<!-- editor2 結束 --><hr/>